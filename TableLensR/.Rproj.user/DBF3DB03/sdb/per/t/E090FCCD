{
    "contents" : "\nlibrary(shiny)\nlibrary(MeanShift)\n\nlibrary(LPCM)\nsource(file = \"silueta.R\")\n\nclusterData <- function(data){\n  set.seed(20)\n  ncluster <- floor(sqrt(nrow(data)))\n  #ncluster <- 7\n  fit.km <- kmeans(data,ncluster,nstart = 25)\n  datalabel <- fit.km$cluster\n  return(datalabel)\n}\n#Data to clustering \ndirData <- \"www/data/\"\ndataString <- c(\"carros_r.data\",\"winequality-white_r.data\",\"Iris.data\")\nclsdata <- rep()\n\n#getting the cluster by using k-means and mean shift\nfor( i in 1:length(dataString) ){\n  clsdatacache <- dataString[i]\n  \n  nameData <- paste(dirData,dataString[i],sep = \"\")\n  \n  dataReader <- read.table(file = nameData , sep=\";\", skip = 4,quote=\"\")\n  if(i == 1){\n    clsdatacache$data <- dataReader[,1:7]\n  }else{\n    if(i ==2){\n      clsdatacache$data <- dataReader[,1:ncol(dataReader)-1]\n    }else{\n      clsdatacache$data <- dataReader[,2:ncol(dataReader)-1]  \n    }\n  }\n  label <-  clusterData(as.matrix(clsdatacache$data))\n  \n  \n  #calculate the silhouette coefficient\n  D <- clsdatacache$data\n  class_D <- label\n  dist_mat_D <- as.matrix( dist(D) ) \n  sil <- SilhouetteCoefficient( class_D, dist_mat_D )\n  \n  #calculate measure for each cell in the cluster\n  clsuterMesaure <- clusterEntropyInstance(dist_mat_D, sil, class_D,D)\n  clsuterMesaure <- cbind(clsuterMesaure,sil)\n  \n  nameData <- paste(dirData,paste(\"sil_ins_\",dataString[i],sep = \"\"),sep = \"\")\n   write.table(clsuterMesaure,file = nameData,sep = \";\",row.names = FALSE)\n  #write the first element to representing\n  databind <- cbind(clsdatacache$data,label)\n  data_silhoutte <- cbind(clsdatacache$data,sil)\n  nameData <- paste(dirData,paste(\"cls_\",dataString[i],sep = \"\"),sep = \"\")\n  write.table(databind,file = nameData,sep = \";\",row.names = FALSE)\n  \n  #Transpose matrix\n  data_tr <- clsdatacache$data\n  clsdatacache$tr <- t(data_tr)\n  data_tr <-clsdatacache$tr\n  #Normalize transpose data\n  clsdatacache$nm_tr <- clsdatacache$tr / apply(clsdatacache$tr,1,sd)\n  \n  data_tr<- clsdatacache$nm_tr\n # print(dim(data_tr))\n  \n  clsdata[i] <-  data_tr\n  \n # \n  \n  rm(clsdatacache)\n  rm(label)\n}\n\nclusterEntropyInstance <- function(disInstance,silhouette,labels,data_){\n  #cluster labels \n  data_labels <- labels\n  data_label_index <- unique(labels)\n  data_dist <- disInstance\n  data_silhouette <- silhouette\n  real_data <- data_\n  real_data <- data.frame(real_data)\n  #separte the cluster\n  cluster_data_id <-  rep(0, nrow(real_data)) #cluster data id\n  cluster_data <- vector(\"list\",length = length(data_label_index))\n  silhouette_variable <- vector(\"list\",length = length(real_data))\n  data_name <- colnames(real_data)\n  for (j in 1:length(real_data)) {\n    dist_mat_D <- as.matrix( dist(real_data[j]) ) \n    class_D <- data_labels\n    sil <- SilhouetteCoefficient( class_D, dist_mat_D )\n  \n    silhouette_variable[[j]] <- c( silhouette_variable[[j]],sil)\n  }\n  n_row <- unlist(silhouette_variable[[1]])\n  \n  data_silhouette_instance <- as.data.frame(silhouette_variable)\n  colnames(data_silhouette_instance) <- data_name\n  #for(j in 1:length(silhouette_variable)){\n   # print(silhouette_variable[[j]])\n  #}\n  return (data_silhouette_instance)\n  \n  for(j in 1:length(data_labels)){\n    same_index <- which(data_label_index %in% data_labels[j])#\n    cluster_data[[same_index]] <- c(cluster_data[[same_index]], j )\n    cluster_data_id[same_index] <- same_index\n  }\n  \n \n  for(i in 1:length(cluster_data)){\n    data_row_index <- unlist(cluster_data[i])\n    real_cluster  <- real_data[data_row_index,]\n    real_distance_cluster <-  as.matrix(dist(real_cluster))\n    \"%not%\" <- Negate(\"%in%\")\n    print(paste(\"cluster \",i,sep = \" \"))\n    instance_cluster <- colnames(real_distance_cluster)\n   \n      #getting the instance in variable that is not into cluster\n      for(j in 1:length(real_cluster)){\n       # print(dist(real_cluster[j]))\n      }\n    \n  #  real_distance_data <- subset(data_dist[,data_row_index]\n    #print(apply(real_distance,2,mean))\n    \n  }\n}\n\n\n",
    "created" : 1484237740703.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "104|34|108|2|\n111|35|127|2|\n",
    "hash" : "2632608802",
    "id" : "E090FCCD",
    "lastKnownWriteTime" : 1485817296,
    "path" : "C:/xampp/htdocs/TableLensRowUpdateFiseyes/TableLensR/entropy.R",
    "project_path" : "entropy.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}